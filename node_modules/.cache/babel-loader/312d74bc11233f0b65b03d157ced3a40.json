{"ast":null,"code":"var _jsxFileName = \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp']; // Constants\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // SystemProgram is a reference to the Solana runtime!\n\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nlet baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n};\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); // Actions\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter gif link!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this);\n    }\n  }; // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","idl","TEST_GIFS","TWITTER_HANDLE","TWITTER_LINK","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendGif","length","onInputChange","event","value","target","getProvider","connection","provider","createGifAccount","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","gifLink","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"sources":["/Users/shivanshdwivedi/Desktop/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n  \n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n    <div className=\"container\">\n      <div className=\"header-container\">\n        <p className=\"header\">ðŸ–¼ GIF Portal</p>\n        <p className=\"sub-text\">\n          View your GIF collection in the metaverse âœ¨\n        </p>\n        {!walletAddress && renderNotConnectedContainer()}\n        {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n      </div>\n      <div className=\"footer-container\">\n        <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n        <a\n          className=\"footer-text\"\n          href={TWITTER_LINK}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >{`built on @${TWITTER_HANDLE}`}</a>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}