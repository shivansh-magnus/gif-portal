{"ast":null,"code":"import _asyncToGenerator from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";\nimport EventEmitter from \"eventemitter3\";\nimport camelCase from \"camelcase\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { stateDiscriminator } from \"../../coder\";\nimport { getProvider } from \"../../\";\nimport { validateAccounts, parseIdlErrors } from \"../common\";\nimport { findProgramAddressSync, createWithSeedSync } from \"../../utils/pubkey\";\nimport InstructionNamespaceFactory from \"./instruction\";\nimport RpcNamespaceFactory from \"./rpc\";\nimport TransactionNamespaceFactory from \"./transaction\";\n\nvar StateFactory = /*#__PURE__*/function () {\n  function StateFactory() {\n    _classCallCheck(this, StateFactory);\n  }\n\n  _createClass(StateFactory, null, [{\n    key: \"build\",\n    value: function build(idl, coder, programId, provider) {\n      if (idl.state === undefined) {\n        return undefined;\n      }\n\n      return new StateClient(idl, programId, provider, coder);\n    }\n  }]);\n\n  return StateFactory;\n}();\n/**\n * A client for the program state. Similar to the base [[Program]] client,\n * one can use this to send transactions and read accounts for the state\n * abstraction.\n */\n\n\nexport { StateFactory as default };\nexport var StateClient = /*#__PURE__*/function () {\n  function StateClient(idl, programId) {\n    var provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getProvider();\n    var coder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Coder(idl);\n\n    _classCallCheck(this, StateClient);\n\n    this.provider = provider;\n    this.coder = coder;\n    this._idl = idl;\n    this._programId = programId;\n    this._address = programStateAddress(programId);\n    this._sub = null; // Build namespaces.\n\n    var _ref = function () {\n      var _a;\n\n      var instruction = {};\n      var transaction = {};\n      var rpc = {};\n      (_a = idl.state) === null || _a === void 0 ? void 0 : _a.methods.forEach(function (m) {\n        // Build instruction method.\n        var ixItem = InstructionNamespaceFactory.build(m, function (ixName, ix) {\n          return coder.instruction.encodeState(ixName, ix);\n        }, programId);\n\n        ixItem[\"accounts\"] = function (accounts) {\n          var keys = stateInstructionKeys(programId, provider, m, accounts);\n          return keys.concat(InstructionNamespaceFactory.accountsArray(accounts, m.accounts));\n        }; // Build transaction method.\n\n\n        // Build transaction method.\n        var txItem = TransactionNamespaceFactory.build(m, ixItem); // Build RPC method.\n\n        // Build RPC method.\n        var rpcItem = RpcNamespaceFactory.build(m, txItem, parseIdlErrors(idl), provider); // Attach them all to their respective namespaces.\n\n        // Attach them all to their respective namespaces.\n        var name = camelCase(m.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n      });\n      return [instruction, transaction, rpc];\n    }(),\n        _ref2 = _slicedToArray(_ref, 3),\n        instruction = _ref2[0],\n        transaction = _ref2[1],\n        rpc = _ref2[2];\n\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.rpc = rpc;\n  }\n  /**\n   * Returns the program ID owning the state.\n   */\n\n\n  _createClass(StateClient, [{\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n    /**\n     * Returns the deserialized state account.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var addr, accountInfo, state, expectedDiscriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addr = this.address();\n                _context.next = 3;\n                return this.provider.connection.getAccountInfo(addr);\n\n              case 3:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo === null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist \".concat(addr.toString()));\n\n              case 6:\n                // Assert the account discriminator is correct.\n                state = this._idl.state;\n\n                if (state) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new Error(\"State is not specified in IDL.\");\n\n              case 9:\n                _context.next = 11;\n                return stateDiscriminator(state.struct.name);\n\n              case 11:\n                expectedDiscriminator = _context.sent;\n\n                if (!expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {\n                  _context.next = 14;\n                  break;\n                }\n\n                throw new Error(\"Invalid account discriminator\");\n\n              case 14:\n                return _context.abrupt(\"return\", this.coder.state.decode(accountInfo.data));\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Returns the state address.\n     */\n\n  }, {\n    key: \"address\",\n    value: function address() {\n      return this._address;\n    }\n    /**\n     * Returns an `EventEmitter` with a `\"change\"` event that's fired whenever\n     * the state account cahnges.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(commitment) {\n      var _this = this;\n\n      if (this._sub !== null) {\n        return this._sub.ee;\n      }\n\n      var ee = new EventEmitter();\n      var listener = this.provider.connection.onAccountChange(this.address(), function (acc) {\n        var account = _this.coder.state.decode(acc.data);\n\n        ee.emit(\"change\", account);\n      }, commitment);\n      this._sub = {\n        ee: ee,\n        listener: listener\n      };\n      return ee;\n    }\n    /**\n     * Unsubscribes to state changes.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this2 = this;\n\n      if (this._sub !== null) {\n        this.provider.connection.removeAccountChangeListener(this._sub.listener).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this2._sub = null;\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }))).catch(console.error);\n      }\n    }\n  }]);\n\n  return StateClient;\n}(); // Calculates the deterministic address of the program's \"state\" account.\n\nfunction programStateAddress(programId) {\n  var _findProgramAddressSy = findProgramAddressSync([], programId),\n      _findProgramAddressSy2 = _slicedToArray(_findProgramAddressSy, 1),\n      registrySigner = _findProgramAddressSy2[0];\n\n  return createWithSeedSync(registrySigner, \"unversioned\", programId);\n} // Returns the common keys that are prepended to all instructions targeting\n// the \"state\" of a program.\n\n\nfunction stateInstructionKeys(programId, provider, m, accounts) {\n  if (m.name === \"new\") {\n    // Ctor `new` method.\n    var _findProgramAddressSy3 = findProgramAddressSync([], programId),\n        _findProgramAddressSy4 = _slicedToArray(_findProgramAddressSy3, 1),\n        programSigner = _findProgramAddressSy4[0];\n\n    return [{\n      pubkey: provider.wallet.publicKey,\n      isWritable: false,\n      isSigner: true\n    }, {\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: programSigner,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: SystemProgram.programId,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: programId,\n      isWritable: false,\n      isSigner: false\n    }];\n  } else {\n    validateAccounts(m.accounts, accounts);\n    return [{\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }];\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","camelCase","SystemProgram","Coder","stateDiscriminator","getProvider","validateAccounts","parseIdlErrors","findProgramAddressSync","createWithSeedSync","InstructionNamespaceFactory","RpcNamespaceFactory","TransactionNamespaceFactory","StateFactory","idl","coder","programId","provider","state","undefined","StateClient","_idl","_programId","_address","programStateAddress","_sub","instruction","transaction","rpc","_a","methods","forEach","m","ixItem","build","ixName","ix","encodeState","accounts","keys","stateInstructionKeys","concat","accountsArray","txItem","rpcItem","name","addr","address","connection","getAccountInfo","accountInfo","Error","toString","struct","expectedDiscriminator","compare","data","slice","decode","commitment","ee","listener","onAccountChange","acc","account","emit","removeAccountChangeListener","then","catch","console","error","registrySigner","programSigner","pubkey","wallet","publicKey","isWritable","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/state.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}