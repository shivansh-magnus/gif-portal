{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";\nimport assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { chunks } from \"../utils/common\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\n\nexport function invoke(_x, _x2, _x3, _x4) {\n  return _invoke.apply(this, arguments);\n}\n\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId, accounts, data, provider) {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = translateAddress(programId);\n\n            if (!provider) {\n              provider = getProvider();\n            }\n\n            tx = new Transaction();\n            tx.add(new TransactionInstruction({\n              programId: programId,\n              keys: accounts !== null && accounts !== void 0 ? accounts : [],\n              data: data\n            }));\n            _context.next = 6;\n            return provider.send(tx);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _invoke.apply(this, arguments);\n}\n\nvar GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\nexport function getMultipleAccounts(_x5, _x6) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, publicKeys) {\n    var batches, results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 3;\n            return getMultipleAccountsCore(connection, publicKeys);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n            batches = chunks(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n            _context2.next = 9;\n            return Promise.all(batches.map(function (batch) {\n              return getMultipleAccountsCore(connection, batch);\n            }));\n\n          case 9:\n            results = _context2.sent;\n            return _context2.abrupt(\"return\", results.flat());\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction getMultipleAccountsCore(_x7, _x8) {\n  return _getMultipleAccountsCore.apply(this, arguments);\n}\n\nfunction _getMultipleAccountsCore() {\n  _getMultipleAccountsCore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, publicKeys) {\n    var args, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            }), {\n              commitment: \"recent\"\n            }]; // @ts-ignore\n\n            _context3.next = 3;\n            return connection._rpcRequest(\"getMultipleAccounts\", args);\n\n          case 3:\n            res = _context3.sent;\n\n            if (!res.error) {\n              _context3.next = 6;\n              break;\n            }\n\n            throw new Error(\"failed to get info about accounts \" + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(\", \") + \": \" + res.error.message);\n\n          case 6:\n            assert(typeof res.result !== \"undefined\");\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context3.prev = 9;\n\n            _iterator.s();\n\n          case 11:\n            if ((_step = _iterator.n()).done) {\n              _context3.next = 23;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (!(account === null)) {\n              _context3.next = 17;\n              break;\n            }\n\n            accounts.push(null);\n            return _context3.abrupt(\"continue\", 21);\n\n          case 17:\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              assert(data[1] === \"base64\");\n              value = {\n                executable: executable,\n                owner: new PublicKey(owner),\n                lamports: lamports,\n                data: Buffer.from(data[0], \"base64\")\n              };\n            }\n\n            if (!(value === null)) {\n              _context3.next = 20;\n              break;\n            }\n\n            throw new Error(\"Invalid response\");\n\n          case 20:\n            accounts.push(value);\n\n          case 21:\n            _context3.next = 11;\n            break;\n\n          case 23:\n            _context3.next = 28;\n            break;\n\n          case 25:\n            _context3.prev = 25;\n            _context3.t0 = _context3[\"catch\"](9);\n\n            _iterator.e(_context3.t0);\n\n          case 28:\n            _context3.prev = 28;\n\n            _iterator.f();\n\n            return _context3.finish(28);\n\n          case 31:\n            return _context3.abrupt(\"return\", accounts.map(function (account, idx) {\n              if (account === null) {\n                return null;\n              }\n\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 32:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[9, 25, 28, 31]]);\n  }));\n  return _getMultipleAccountsCore.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["assert","PublicKey","Transaction","TransactionInstruction","chunks","translateAddress","getProvider","invoke","programId","accounts","data","provider","tx","add","keys","send","GET_MULTIPLE_ACCOUNTS_LIMIT","getMultipleAccounts","connection","publicKeys","length","getMultipleAccountsCore","batches","Promise","all","map","batch","results","flat","args","k","toBase58","commitment","_rpcRequest","res","error","Error","join","message","result","value","account","push","executable","owner","lamports","Buffer","from","idx","publicKey"],"sourceRoot":"","sources":["../../../src/utils/rpc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}