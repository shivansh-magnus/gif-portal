{"ast":null,"code":"import _asyncToGenerator from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\nimport camelcase from \"camelcase\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport var ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport var AccountsCoder = /*#__PURE__*/function () {\n  function AccountsCoder(idl) {\n    _classCallCheck(this, AccountsCoder);\n\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    var layouts = idl.accounts.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  _createClass(AccountsCoder, [{\n    key: \"encode\",\n    value: function () {\n      var _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountName, account) {\n        var buffer, layout, len, accountData, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n                layout = this.accountLayouts.get(accountName);\n\n                if (layout) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Unknown account: \".concat(accountName));\n\n              case 4:\n                len = layout.encode(account, buffer);\n                accountData = buffer.slice(0, len);\n                discriminator = AccountsCoder.accountDiscriminator(accountName);\n                return _context.abrupt(\"return\", Buffer.concat([discriminator, accountData]));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encode(_x, _x2) {\n        return _encode.apply(this, arguments);\n      }\n\n      return encode;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      // Chop off the discriminator before decoding.\n      var data = ix.slice(ACCOUNT_DISCRIMINATOR_SIZE);\n      var layout = this.accountLayouts.get(accountName);\n\n      if (!layout) {\n        throw new Error(\"Unknown account: \".concat(accountName));\n      }\n\n      return layout.decode(data);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n\n  }], [{\n    key: \"accountDiscriminator\",\n    value: function accountDiscriminator(name) {\n      return Buffer.from(sha256.digest(\"account:\".concat(camelcase(name, {\n        pascalCase: true\n      })))).slice(0, ACCOUNT_DISCRIMINATOR_SIZE);\n    }\n  }]);\n\n  return AccountsCoder;\n}();","map":{"version":3,"mappings":";;;;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA;;;;AAGA,OAAO,IAAMC,0BAA0B,GAAG,CAAnC;AAEP;;;;AAGA,WAAaC,aAAb;EAME,uBAAmBC,GAAnB,EAA2B;IAAA;;IACzB,IAAIA,GAAG,CAACC,QAAJ,KAAiBC,SAArB,EAAgC;MAC9B,KAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;MACA;IACD;;IACD,IAAMC,OAAO,GAAkBL,GAAG,CAACC,QAAJ,CAAaK,GAAb,CAAiB,UAACC,GAAD,EAAQ;MACtD,OAAO,CAACA,GAAG,CAACC,IAAL,EAAgBb,QAAQ,CAACc,aAAT,CAAuBF,GAAvB,EAA4BP,GAAG,CAACU,KAAhC,CAAhB,CAAP;IACD,CAF8B,CAA/B;IAIA,KAAKP,cAAL,GAAsB,IAAIC,GAAJ,CAAQC,OAAR,CAAtB;EACD;;EAhBH;IAAA;IAAA;MAAA,uEAkBS,iBAAsBM,WAAtB,EAAsCC,OAAtC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACCC,MADD,GACUC,MAAM,CAACC,KAAP,CAAa,IAAb,CADV,EAC8B;;gBAC7BC,MAFD,GAEU,KAAKb,cAAL,CAAoBc,GAApB,CAAwBN,WAAxB,CAFV;;gBAAA,IAGAK,MAHA;kBAAA;kBAAA;gBAAA;;gBAAA,MAIG,IAAIE,KAAJ,4BAA8BP,WAA9B,EAJH;;cAAA;gBAMCQ,GAND,GAMOH,MAAM,CAACI,MAAP,CAAcR,OAAd,EAAuBC,MAAvB,CANP;gBAODQ,WAPC,GAOaR,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBH,GAAhB,CAPb;gBAQDI,aARC,GAQexB,aAAa,CAACyB,oBAAd,CAAmCb,WAAnC,CARf;gBAAA,iCASEG,MAAM,CAACW,MAAP,CAAc,CAACF,aAAD,EAAgBF,WAAhB,CAAd,CATF;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAlBT;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA,OA8BS,gBAAgBV,WAAhB,EAAgCe,EAAhC,EAA0C;MAC/C;MACA,IAAMC,IAAI,GAAGD,EAAE,CAACJ,KAAH,CAASxB,0BAAT,CAAb;MACA,IAAMkB,MAAM,GAAG,KAAKb,cAAL,CAAoBc,GAApB,CAAwBN,WAAxB,CAAf;;MACA,IAAI,CAACK,MAAL,EAAa;QACX,MAAM,IAAIE,KAAJ,4BAA8BP,WAA9B,EAAN;MACD;;MACD,OAAOK,MAAM,CAACY,MAAP,CAAcD,IAAd,CAAP;IACD;IAED;;;;;;EAxCF;IAAA;IAAA,OA6CS,8BAA4BnB,IAA5B,EAAwC;MAC7C,OAAOM,MAAM,CAACe,IAAP,CACLjC,MAAM,CAACkC,MAAP,mBAAyBjC,SAAS,CAACW,IAAD,EAAO;QAAEuB,UAAU,EAAE;MAAd,CAAP,CAAlC,EADK,EAELT,KAFK,CAEC,CAFD,EAEIxB,0BAFJ,CAAP;IAGD;EAjDH;;EAAA;AAAA","names":["IdlCoder","sha256","camelcase","ACCOUNT_DISCRIMINATOR_SIZE","AccountsCoder","idl","accounts","undefined","accountLayouts","Map","layouts","map","acc","name","typeDefLayout","types","accountName","account","buffer","Buffer","alloc","layout","get","Error","len","encode","accountData","slice","discriminator","accountDiscriminator","concat","ix","data","decode","from","digest","pascalCase"],"sourceRoot":"","sources":["../../../src/coder/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}