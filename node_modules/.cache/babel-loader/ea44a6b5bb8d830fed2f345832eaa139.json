{"ast":null,"code":"import _asyncToGenerator from\"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect,useState}from'react';import twitterLogo from\"./assets/twitter-logo.svg\";import'./App.css';import{Connection,PublicKey,clusterApiUrl}from'@solana/web3.js';import{Program,Provider,web3}from'@project-serum/anchor';import idl from'./idl.json';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TEST_GIFS=['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp','https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g','https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g','https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];// Constants\nvar TWITTER_HANDLE='_buildspace';var TWITTER_LINK=\"https://twitter.com/\".concat(TWITTER_HANDLE);// SystemProgram is a reference to the Solana runtime!\nvar SystemProgram=web3.SystemProgram,Keypair=web3.Keypair;// Create a keypair for the account that will hold the GIF data.\nvar baseAccount=Keypair.generate();// Get our program's id from the IDL file.\nvar programID=new PublicKey(idl.metadata.address);// Set our network to devnet.\nvar network=clusterApiUrl('devnet');// Controls how we want to acknowledge when a transaction is \"done\".\nvar opts={preflightCommitment:\"processed\"};var App=function App(){// State\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),walletAddress=_useState2[0],setWalletAddress=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),inputValue=_useState4[0],setInputValue=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),gifList=_useState6[0],setGifList=_useState6[1];// Actions\nvar checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,solana,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_window=window,solana=_window.solana;if(!solana){_context.next=12;break;}if(!solana.isPhantom){_context.next=10;break;}console.log('Phantom wallet found!');_context.next=7;return solana.connect({onlyIfTrusted:true});case 7:response=_context.sent;console.log('Connected with Public Key:',response.publicKey.toString());/*\n           * Set the user's publicKey in state to be used later!\n           */setWalletAddress(response.publicKey.toString());case 10:_context.next=13;break;case 12:alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');case 13:_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 18:case\"end\":return _context.stop();}}},_callee,null,[[0,15]]);}));return function checkIfWalletIsConnected(){return _ref.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,solana,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window2=window,solana=_window2.solana;if(!solana){_context2.next=7;break;}_context2.next=4;return solana.connect();case 4:response=_context2.sent;console.log('Connected with Public Key:',response.publicKey.toString());setWalletAddress(response.publicKey.toString());case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();var sendGif=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var provider,program;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(inputValue.length===0)){_context3.next=3;break;}console.log(\"No gif link given!\");return _context3.abrupt(\"return\");case 3:setInputValue('');console.log('Gif link:',inputValue);_context3.prev=5;provider=getProvider();program=new Program(idl,programID,provider);_context3.next=10;return program.rpc.addGif(inputValue,{accounts:{baseAccount:baseAccount.publicKey,user:provider.wallet.publicKey}});case 10:console.log(\"GIF successfully sent to program\",inputValue);_context3.next=13;return getGifList();case 13:_context3.next=18;break;case 15:_context3.prev=15;_context3.t0=_context3[\"catch\"](5);console.log(\"Error sending GIF:\",_context3.t0);case 18:case\"end\":return _context3.stop();}}},_callee3,null,[[5,15]]);}));return function sendGif(){return _ref3.apply(this,arguments);};}();var onInputChange=function onInputChange(event){var value=event.target.value;setInputValue(value);};var getProvider=function getProvider(){var connection=new Connection(network,opts.preflightCommitment);var provider=new Provider(connection,window.solana,opts.preflightCommitment);return provider;};var createGifAccount=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var provider,program;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;provider=getProvider();program=new Program(idl,programID,provider);console.log(\"ping\");_context4.next=6;return program.rpc.startStuffOff({accounts:{baseAccount:baseAccount.publicKey,user:provider.wallet.publicKey,systemProgram:SystemProgram.programId},signers:[baseAccount]});case 6:console.log(\"Created a new BaseAccount w/ address:\",baseAccount.publicKey.toString());_context4.next=9;return getGifList();case 9:_context4.next=14;break;case 11:_context4.prev=11;_context4.t0=_context4[\"catch\"](0);console.log(\"Error creating BaseAccount account:\",_context4.t0);case 14:case\"end\":return _context4.stop();}}},_callee4,null,[[0,11]]);}));return function createGifAccount(){return _ref4.apply(this,arguments);};}();var renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/_jsx(\"button\",{className:\"cta-button connect-wallet-button\",onClick:connectWallet,children:\"Connect to Wallet\"});};var renderConnectedContainer=function renderConnectedContainer(){// If we hit this, it means the program account hasn't been initialized.\nif(gifList===null){return/*#__PURE__*/_jsx(\"div\",{className:\"connected-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"cta-button submit-gif-button\",onClick:createGifAccount,children:\"Do One-Time Initialization For GIF Program Account\"})});}// Otherwise, we're good! Account exists. User can submit GIFs.\nelse{return/*#__PURE__*/_jsxs(\"div\",{className:\"connected-container\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:function onSubmit(event){event.preventDefault();sendGif();},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter gif link!\",value:inputValue,onChange:onInputChange}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"cta-button submit-gif-button\",children:\"Submit\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"gif-grid\",children:gifList.map(function(item,index){return/*#__PURE__*/_jsx(\"div\",{className:\"gif-item\",children:/*#__PURE__*/_jsx(\"img\",{src:item.gifLink})},index);})})]});}};// UseEffects\nuseEffect(function(){var onLoad=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return checkIfWalletIsConnected();case 2:case\"end\":return _context5.stop();}}},_callee5);}));return function onLoad(){return _ref5.apply(this,arguments);};}();window.addEventListener('load',onLoad);return function(){return window.removeEventListener('load',onLoad);};},[]);var getGifList=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var provider,program,account;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;provider=getProvider();program=new Program(idl,programID,provider);_context6.next=5;return program.account.baseAccount.fetch(baseAccount.publicKey);case 5:account=_context6.sent;console.log(\"Got the account\",account);setGifList(account.gifList);_context6.next=14;break;case 10:_context6.prev=10;_context6.t0=_context6[\"catch\"](0);console.log(\"Error in getGifList: \",_context6.t0);setGifList(null);case 14:case\"end\":return _context6.stop();}}},_callee6,null,[[0,10]]);}));return function getGifList(){return _ref6.apply(this,arguments);};}();useEffect(function(){if(walletAddress){console.log('Fetching GIF list...');getGifList();}},[walletAddress]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"header\",children:\"\\uD83D\\uDDBC GIF Portal\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sub-text\",children:\"View your GIF collection in the metaverse \\u2728\"}),!walletAddress&&renderNotConnectedContainer(),walletAddress&&renderConnectedContainer()]}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-container\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/_jsx(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\",children:\"built on @\".concat(TWITTER_HANDLE)})]})]})});};export default App;","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","idl","TEST_GIFS","TWITTER_HANDLE","TWITTER_LINK","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","createGifAccount","startStuffOff","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","gifLink","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"sources":["/Users/shivanshdwivedi/Desktop/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n  \n  \n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n    <div className=\"container\">\n      <div className=\"header-container\">\n        <p className=\"header\">ðŸ–¼ GIF Portal</p>\n        <p className=\"sub-text\">\n          View your GIF collection in the metaverse âœ¨\n        </p>\n        {!walletAddress && renderNotConnectedContainer()}\n        {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n      </div>\n      <div className=\"footer-container\">\n        <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n        <a\n          className=\"footer-text\"\n          href={TWITTER_LINK}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >{`built on @${TWITTER_HANDLE}`}</a>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}