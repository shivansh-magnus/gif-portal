{"ast":null,"code":"import _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\"; // Re-exports.\n\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\n\nvar NamespaceFactory = /*#__PURE__*/function () {\n  function NamespaceFactory() {\n    _classCallCheck(this, NamespaceFactory);\n  }\n\n  _createClass(NamespaceFactory, null, [{\n    key: \"build\",\n    value:\n    /**\n     * Generates all namespaces for a given program.\n     */\n    function build(idl, coder, programId, provider) {\n      var rpc = {};\n      var instruction = {};\n      var transaction = {};\n      var simulate = {};\n      var idlErrors = parseIdlErrors(idl);\n      var state = StateFactory.build(idl, coder, programId, provider);\n      idl.instructions.forEach(function (idlIx) {\n        var ixItem = InstructionFactory.build(idlIx, function (ixName, ix) {\n          return coder.instruction.encode(ixName, ix);\n        }, programId);\n        var txItem = TransactionFactory.build(idlIx, ixItem);\n        var rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n        var simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n        var name = camelCase(idlIx.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n        simulate[name] = simulateItem;\n      });\n      var account = idl.accounts ? AccountFactory.build(idl, coder, programId, provider) : {};\n      return [rpc, instruction, transaction, account, simulate, state];\n    }\n  }]);\n\n  return NamespaceFactory;\n}();\n\nexport { NamespaceFactory as default };","map":{"version":3,"mappings":";;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAKA,OAAOC,YAAP,MAA0C,SAA1C;AACA,OAAOC,kBAAP,MAAyD,eAAzD;AACA,OAAOC,kBAAP,MAAyD,eAAzD;AACA,OAAOC,UAAP,MAAyC,OAAzC;AACA,OAAOC,cAAP,MAAiD,WAAjD;AACA,OAAOC,eAAP,MAAmD,YAAnD;AACA,SAASC,cAAT,QAA+B,WAA/B,C,CAGA;;AACA,SAASC,WAAT,QAA4B,SAA5B;AAIA,SAA2BC,aAA3B,QAAgE,WAAhE;;IAIqBC,gB;;;;;;;;IACnB;;;IAGO,eACLC,GADK,EAELC,KAFK,EAGLC,SAHK,EAILC,QAJK,EAIa;MASlB,IAAMC,GAAG,GAAiB,EAA1B;MACA,IAAMC,WAAW,GAAyB,EAA1C;MACA,IAAMC,WAAW,GAAyB,EAA1C;MACA,IAAMC,QAAQ,GAAsB,EAApC;MAEA,IAAMC,SAAS,GAAGZ,cAAc,CAACI,GAAD,CAAhC;MAEA,IAAMS,KAAK,GAAGnB,YAAY,CAACoB,KAAb,CAAmBV,GAAnB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0CC,QAA1C,CAAd;MAEAH,GAAG,CAACW,YAAJ,CAAiBC,OAAjB,CAAyB,UAAiCC,KAAjC,EAA6C;QACpE,IAAMC,MAAM,GAAGvB,kBAAkB,CAACmB,KAAnB,CACbG,KADa,EAEb,UAACE,MAAD,EAASC,EAAT;UAAA,OAAgBf,KAAK,CAACI,WAAN,CAAkBY,MAAlB,CAAyBF,MAAzB,EAAiCC,EAAjC,CAAhB;QAAA,CAFa,EAGbd,SAHa,CAAf;QAKA,IAAMgB,MAAM,GAAG1B,kBAAkB,CAACkB,KAAnB,CAAyBG,KAAzB,EAAgCC,MAAhC,CAAf;QACA,IAAMK,OAAO,GAAG1B,UAAU,CAACiB,KAAX,CAAiBG,KAAjB,EAAwBK,MAAxB,EAAgCV,SAAhC,EAA2CL,QAA3C,CAAhB;QACA,IAAMiB,YAAY,GAAGzB,eAAe,CAACe,KAAhB,CACnBG,KADmB,EAEnBK,MAFmB,EAGnBV,SAHmB,EAInBL,QAJmB,EAKnBF,KALmB,EAMnBC,SANmB,EAOnBF,GAPmB,CAArB;QAUA,IAAMqB,IAAI,GAAGhC,SAAS,CAACwB,KAAK,CAACQ,IAAP,CAAtB;QAEAhB,WAAW,CAACgB,IAAD,CAAX,GAAoBP,MAApB;QACAR,WAAW,CAACe,IAAD,CAAX,GAAoBH,MAApB;QACAd,GAAG,CAACiB,IAAD,CAAH,GAAYF,OAAZ;QACAZ,QAAQ,CAACc,IAAD,CAAR,GAAiBD,YAAjB;MACD,CAxBD;MA0BA,IAAME,OAAO,GAA0BtB,GAAG,CAACuB,QAAJ,GACnC7B,cAAc,CAACgB,KAAf,CAAqBV,GAArB,EAA0BC,KAA1B,EAAiCC,SAAjC,EAA4CC,QAA5C,CADmC,GAElC,EAFL;MAIA,OAAO,CACLC,GADK,EAELC,WAFK,EAGLC,WAHK,EAILgB,OAJK,EAKLf,QALK,EAMLE,KANK,CAAP;IAQD;;;;;;SAhEkBV,gB","names":["camelCase","StateFactory","InstructionFactory","TransactionFactory","RpcFactory","AccountFactory","SimulateFactory","parseIdlErrors","StateClient","AccountClient","NamespaceFactory","idl","coder","programId","provider","rpc","instruction","transaction","simulate","idlErrors","state","build","instructions","forEach","idlIx","ixItem","ixName","ix","encode","txItem","rpcItem","simulateItem","name","account","accounts"],"sourceRoot":"","sources":["../../../../src/program/namespace/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}