{"ast":null,"code":"import _toConsumableArray from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";\nimport camelCase from \"camelcase\";\nimport EventEmitter from \"eventemitter3\";\nimport * as bs58 from \"bs58\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { ACCOUNT_DISCRIMINATOR_SIZE, accountSize, AccountsCoder } from \"../../coder\";\nimport { translateAddress } from \"../common\";\nimport { getProvider } from \"../../\";\nimport * as pubkeyUtil from \"../../utils/pubkey\";\nimport * as rpcUtil from \"../../utils/rpc\";\n\nvar AccountFactory = /*#__PURE__*/function () {\n  function AccountFactory() {\n    _classCallCheck(this, AccountFactory);\n  }\n\n  _createClass(AccountFactory, null, [{\n    key: \"build\",\n    value: function build(idl, coder, programId, provider) {\n      var _a;\n\n      var accountFns = {};\n      (_a = idl.accounts) === null || _a === void 0 ? void 0 : _a.forEach(function (idlAccount) {\n        var name = camelCase(idlAccount.name);\n        accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n      });\n      return accountFns;\n    }\n  }]);\n\n  return AccountFactory;\n}();\n\nexport { AccountFactory as default };\nexport var AccountClient = /*#__PURE__*/function () {\n  function AccountClient(idl, idlAccount, programId, provider, coder) {\n    _classCallCheck(this, AccountClient);\n\n    var _a;\n\n    this._idlAccount = idlAccount;\n    this._programId = programId;\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._size = ACCOUNT_DISCRIMINATOR_SIZE + ((_a = accountSize(idl, idlAccount)) !== null && _a !== void 0 ? _a : 0);\n  }\n  /**\n   * Returns the number of bytes in this account.\n   */\n\n\n  _createClass(AccountClient, [{\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n    /**\n     * Returns the program ID owning all accounts.\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */\n\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */\n\n  }, {\n    key: \"coder\",\n    get: function get() {\n      return this._coder;\n    }\n    /**\n     * Returns a deserialized account, returning null if it doesn't exist.\n     *\n     * @param address The address of the account to fetch.\n     */\n\n  }, {\n    key: \"fetchNullable\",\n    value: function () {\n      var _fetchNullable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        var accountInfo, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._provider.connection.getAccountInfo(translateAddress(address));\n\n              case 2:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo === null)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 5:\n                // Assert the account discriminator is correct.\n                discriminator = AccountsCoder.accountDiscriminator(this._idlAccount.name);\n\n                if (!discriminator.compare(accountInfo.data.slice(0, 8))) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Invalid account discriminator\");\n\n              case 8:\n                return _context.abrupt(\"return\", this._coder.accounts.decode(this._idlAccount.name, accountInfo.data));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchNullable(_x) {\n        return _fetchNullable.apply(this, arguments);\n      }\n\n      return fetchNullable;\n    }()\n    /**\n     * Returns a deserialized account.\n     *\n     * @param address The address of the account to fetch.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fetchNullable(address);\n\n              case 2:\n                data = _context2.sent;\n\n                if (!(data === null)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist \".concat(address.toString()));\n\n              case 5:\n                return _context2.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetch(_x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Returns multiple deserialized accounts.\n     * Accounts not found or with wrong discriminator are returned as null.\n     *\n     * @param addresses The addresses of the accounts to fetch.\n     */\n\n  }, {\n    key: \"fetchMultiple\",\n    value: function () {\n      var _fetchMultiple = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(addresses) {\n        var _this = this;\n\n        var accounts, discriminator;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return rpcUtil.getMultipleAccounts(this._provider.connection, addresses.map(function (address) {\n                  return translateAddress(address);\n                }));\n\n              case 2:\n                accounts = _context3.sent;\n                discriminator = AccountsCoder.accountDiscriminator(this._idlAccount.name); // Decode accounts where discriminator is correct, null otherwise\n\n                return _context3.abrupt(\"return\", accounts.map(function (account) {\n                  if (account == null) {\n                    return null;\n                  }\n\n                  if (discriminator.compare(account === null || account === void 0 ? void 0 : account.account.data.slice(0, 8))) {\n                    return null;\n                  }\n\n                  return _this._coder.accounts.decode(_this._idlAccount.name, account === null || account === void 0 ? void 0 : account.account.data);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchMultiple(_x3) {\n        return _fetchMultiple.apply(this, arguments);\n      }\n\n      return fetchMultiple;\n    }()\n    /**\n     * Returns all instances of this account type for the program.\n     *\n     * @param filters User-provided filters to narrow the results from `connection.getProgramAccounts`.\n     *\n     *                When filters are not defined this method returns all\n     *                the account instances.\n     *\n     *                When filters are of type `Buffer`, the filters are appended\n     *                after the discriminator.\n     *\n     *                When filters are of type `GetProgramAccountsFilter[]`,\n     *                filters are appended after the discriminator filter.\n     */\n\n  }, {\n    key: \"all\",\n    value: function () {\n      var _all = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(filters) {\n        var _this2 = this;\n\n        var discriminator, resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                discriminator = AccountsCoder.accountDiscriminator(this._idlAccount.name);\n                _context4.next = 3;\n                return this._provider.connection.getProgramAccounts(this._programId, {\n                  commitment: this._provider.connection.commitment,\n                  filters: [{\n                    memcmp: {\n                      offset: 0,\n                      bytes: bs58.encode(filters instanceof Buffer ? Buffer.concat([discriminator, filters]) : discriminator)\n                    }\n                  }].concat(_toConsumableArray(Array.isArray(filters) ? filters : []))\n                });\n\n              case 3:\n                resp = _context4.sent;\n                return _context4.abrupt(\"return\", resp.map(function (_ref) {\n                  var pubkey = _ref.pubkey,\n                      account = _ref.account;\n                  return {\n                    publicKey: pubkey,\n                    account: _this2._coder.accounts.decode(_this2._idlAccount.name, account.data)\n                  };\n                }));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function all(_x4) {\n        return _all.apply(this, arguments);\n      }\n\n      return all;\n    }()\n    /**\n     * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n     * changes.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(address, commitment) {\n      var _this3 = this;\n\n      var sub = subscriptions.get(address.toString());\n\n      if (sub) {\n        return sub.ee;\n      }\n\n      var ee = new EventEmitter();\n      address = translateAddress(address);\n\n      var listener = this._provider.connection.onAccountChange(address, function (acc) {\n        var account = _this3._coder.accounts.decode(_this3._idlAccount.name, acc.data);\n\n        ee.emit(\"change\", account);\n      }, commitment);\n\n      subscriptions.set(address.toString(), {\n        ee: ee,\n        listener: listener\n      });\n      return ee;\n    }\n    /**\n     * Unsubscribes from the account at the given address.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address) {\n        var sub;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                sub = subscriptions.get(address.toString());\n\n                if (sub) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                console.warn(\"Address is not subscribed\");\n                return _context5.abrupt(\"return\");\n\n              case 4:\n                if (!subscriptions) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                _context5.next = 7;\n                return this._provider.connection.removeAccountChangeListener(sub.listener).then(function () {\n                  subscriptions.delete(address.toString());\n                }).catch(console.error);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function unsubscribe(_x5) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Returns an instruction for creating this account.\n     */\n\n  }, {\n    key: \"createInstruction\",\n    value: function () {\n      var _createInstruction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(signer, sizeOverride) {\n        var size;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                size = this.size;\n                _context6.t0 = SystemProgram;\n                _context6.t1 = this._provider.wallet.publicKey;\n                _context6.t2 = signer.publicKey;\n                _context6.t3 = sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size;\n                _context6.next = 7;\n                return this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size);\n\n              case 7:\n                _context6.t4 = _context6.sent;\n                _context6.t5 = this._programId;\n                _context6.t6 = {\n                  fromPubkey: _context6.t1,\n                  newAccountPubkey: _context6.t2,\n                  space: _context6.t3,\n                  lamports: _context6.t4,\n                  programId: _context6.t5\n                };\n                return _context6.abrupt(\"return\", _context6.t0.createAccount.call(_context6.t0, _context6.t6));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function createInstruction(_x6, _x7) {\n        return _createInstruction.apply(this, arguments);\n      }\n\n      return createInstruction;\n    }()\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated account. Args are keys to associate.\n     * Order matters.\n     */\n\n  }, {\n    key: \"associated\",\n    value: function () {\n      var _associated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var addr,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.associatedAddress.apply(this, _args7);\n\n              case 2:\n                addr = _context7.sent;\n                _context7.next = 5;\n                return this.fetch(addr);\n\n              case 5:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function associated() {\n        return _associated.apply(this, arguments);\n      }\n\n      return associated;\n    }()\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated address. Args are keys to associate.\n     * Order matters.\n     */\n\n  }, {\n    key: \"associatedAddress\",\n    value: function () {\n      var _associatedAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _len,\n            args,\n            _key,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                for (_len = _args8.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = _args8[_key];\n                }\n\n                _context8.next = 3;\n                return pubkeyUtil.associated.apply(pubkeyUtil, [this._programId].concat(args));\n\n              case 3:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function associatedAddress() {\n        return _associatedAddress.apply(this, arguments);\n      }\n\n      return associatedAddress;\n    }()\n  }]);\n\n  return AccountClient;\n}(); // Tracks all subscriptions.\n\nvar subscriptions = new Map();","map":{"version":3,"mappings":"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","names":["camelCase","EventEmitter","bs58","SystemProgram","Coder","ACCOUNT_DISCRIMINATOR_SIZE","accountSize","AccountsCoder","translateAddress","getProvider","pubkeyUtil","rpcUtil","AccountFactory","idl","coder","programId","provider","accountFns","accounts","_a","forEach","idlAccount","name","AccountClient","_idlAccount","_programId","_provider","_coder","_size","address","connection","getAccountInfo","accountInfo","discriminator","accountDiscriminator","compare","data","slice","Error","decode","fetchNullable","toString","addresses","getMultipleAccounts","map","account","filters","getProgramAccounts","commitment","memcmp","offset","bytes","encode","Buffer","concat","Array","isArray","resp","pubkey","publicKey","sub","subscriptions","get","ee","listener","onAccountChange","acc","emit","set","console","warn","removeAccountChangeListener","then","delete","catch","error","signer","sizeOverride","size","wallet","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","associatedAddress","addr","fetch","args","associated","Map"],"sourceRoot":"","sources":["../../../../src/program/namespace/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}