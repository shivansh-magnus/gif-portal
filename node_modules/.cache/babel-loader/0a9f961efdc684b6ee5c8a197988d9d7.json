{"ast":null,"code":"import _asyncToGenerator from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { inflate } from \"pako\";\nimport { idlAddress, decodeIdlAccount } from \"../idl\";\nimport Coder from \"../coder\";\nimport NamespaceFactory from \"./namespace\";\nimport { getProvider } from \"../\";\nimport { utf8 } from \"../utils/bytes\";\nimport { EventManager } from \"./event\";\nimport { translateAddress } from \"./common\";\nexport * from \"./common\";\nexport * from \"./context\";\nexport * from \"./event\";\nexport * from \"./namespace\";\n/**\n * ## Program\n *\n * Program provides the IDL deserialized client representation of an Anchor\n * program.\n *\n * This API is the one stop shop for all things related to communicating with\n * on-chain programs. Among other things, one can send transactions, fetch\n * deserialized accounts, decode instruction data, subscribe to account\n * changes, and listen to events.\n *\n * In addition to field accessors and methods, the object provides a set of\n * dynamically generated properties, also known as namespaces, that\n * map one-to-one to program methods and accounts. These namespaces generally\n *  can be used as follows:\n *\n * ## Usage\n *\n * ```javascript\n * program.<namespace>.<program-specific-method>\n * ```\n *\n * API specifics are namespace dependent. The examples used in the documentation\n * below will refer to the two counter examples found\n * [here](https://github.com/project-serum/anchor#examples).\n */\n\nexport var Program = /*#__PURE__*/function () {\n  /**\n   * @param idl       The interface definition.\n   * @param programId The on-chain address of the program.\n   * @param provider  The network and wallet context to use. If not provided\n   *                  then uses [[getProvider]].\n   */\n  function Program(idl, programId, provider) {\n    _classCallCheck(this, Program);\n\n    programId = translateAddress(programId);\n\n    if (!provider) {\n      provider = getProvider();\n    } // Fields.\n\n\n    this._idl = idl;\n    this._provider = provider;\n    this._programId = programId;\n    this._coder = new Coder(idl);\n    this._events = new EventManager(this._programId, provider, this._coder); // Dynamic namespaces.\n\n    var _NamespaceFactory$bui = NamespaceFactory.build(idl, this._coder, programId, provider),\n        _NamespaceFactory$bui2 = _slicedToArray(_NamespaceFactory$bui, 6),\n        rpc = _NamespaceFactory$bui2[0],\n        instruction = _NamespaceFactory$bui2[1],\n        transaction = _NamespaceFactory$bui2[2],\n        account = _NamespaceFactory$bui2[3],\n        simulate = _NamespaceFactory$bui2[4],\n        state = _NamespaceFactory$bui2[5];\n\n    this.rpc = rpc;\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.account = account;\n    this.simulate = simulate;\n    this.state = state;\n  }\n  /**\n   * Address of the program.\n   */\n\n\n  _createClass(Program, [{\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n    /**\n     * IDL defining the program's interface.\n     */\n\n  }, {\n    key: \"idl\",\n    get: function get() {\n      return this._idl;\n    }\n    /**\n     * Coder for serializing requests.\n     */\n\n  }, {\n    key: \"coder\",\n    get: function get() {\n      return this._coder;\n    }\n    /**\n     * Wallet and network provider.\n     */\n\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this._provider;\n    }\n    /**\n     * Generates a Program client by fetching the IDL from the network.\n     *\n     * In order to use this method, an IDL must have been previously initialized\n     * via the anchor CLI's `anchor idl init` command.\n     *\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context.\n     */\n\n  }, {\n    key: \"addEventListener\",\n    value:\n    /**\n     * Invokes the given callback every time the given event is emitted.\n     *\n     * @param eventName The PascalCase name of the event, provided by the IDL.\n     * @param callback  The function to invoke whenever the event is emitted from\n     *                  program logs.\n     */\n    function addEventListener(eventName, callback) {\n      return this._events.addEventListener(eventName, callback);\n    }\n    /**\n     * Unsubscribes from the given eventName.\n     */\n\n  }, {\n    key: \"removeEventListener\",\n    value: function () {\n      var _removeEventListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(listener) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._events.removeEventListener(listener);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function removeEventListener(_x) {\n        return _removeEventListener.apply(this, arguments);\n      }\n\n      return removeEventListener;\n    }()\n  }], [{\n    key: \"at\",\n    value: function () {\n      var _at = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address, provider) {\n        var programId, idl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                programId = translateAddress(address);\n                _context2.next = 3;\n                return Program.fetchIdl(programId, provider);\n\n              case 3:\n                idl = _context2.sent;\n\n                if (idl) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"IDL not found for program: \".concat(address.toString()));\n\n              case 6:\n                return _context2.abrupt(\"return\", new Program(idl, programId, provider));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function at(_x2, _x3) {\n        return _at.apply(this, arguments);\n      }\n\n      return at;\n    }()\n    /**\n     * Fetches an idl from the blockchain.\n     *\n     * In order to use this method, an IDL must have been previously initialized\n     * via the anchor CLI's `anchor idl init` command.\n     *\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context.\n     */\n\n  }, {\n    key: \"fetchIdl\",\n    value: function () {\n      var _fetchIdl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address, provider) {\n        var programId, idlAddr, accountInfo, idlAccount, inflatedIdl;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                provider = provider !== null && provider !== void 0 ? provider : getProvider();\n                programId = translateAddress(address);\n                _context3.next = 4;\n                return idlAddress(programId);\n\n              case 4:\n                idlAddr = _context3.sent;\n                _context3.next = 7;\n                return provider.connection.getAccountInfo(idlAddr);\n\n              case 7:\n                accountInfo = _context3.sent;\n\n                if (accountInfo) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 10:\n                // Chop off account discriminator.\n                idlAccount = decodeIdlAccount(accountInfo.data.slice(8));\n                inflatedIdl = inflate(idlAccount.data);\n                return _context3.abrupt(\"return\", JSON.parse(utf8.decode(inflatedIdl)));\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fetchIdl(_x4, _x5) {\n        return _fetchIdl.apply(this, arguments);\n      }\n\n      return fetchIdl;\n    }()\n  }]);\n\n  return Program;\n}();","map":{"version":3,"mappings":"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","names":["inflate","idlAddress","decodeIdlAccount","Coder","NamespaceFactory","getProvider","utf8","EventManager","translateAddress","Program","idl","programId","provider","_idl","_provider","_programId","_coder","_events","build","rpc","instruction","transaction","account","simulate","state","eventName","callback","addEventListener","listener","removeEventListener","address","fetchIdl","Error","toString","idlAddr","connection","getAccountInfo","accountInfo","idlAccount","data","slice","inflatedIdl","JSON","parse","decode"],"sourceRoot":"","sources":["../../../src/program/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}