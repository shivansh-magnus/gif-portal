{"ast":null,"code":"import _asyncToGenerator from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Connection, Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\n\nvar Provider = /*#__PURE__*/function () {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  function Provider(connection, wallet, opts) {\n    _classCallCheck(this, Provider);\n\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  _createClass(Provider, [{\n    key: \"send\",\n    value:\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provider wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx, signers, opts) {\n        var rawTx, txId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                tx.feePayer = this.wallet.publicKey;\n                _context.next = 5;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 5:\n                tx.recentBlockhash = _context.sent.blockhash;\n                _context.next = 8;\n                return this.wallet.signTransaction(tx);\n\n              case 8:\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                rawTx = tx.serialize();\n                _context.next = 12;\n                return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 12:\n                txId = _context.sent;\n                return _context.abrupt(\"return\", txId);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function send(_x, _x2, _x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n\n  }, {\n    key: \"sendAll\",\n    value: function () {\n      var _sendAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(reqs, opts) {\n        var _this = this;\n\n        var blockhash, txs, signedTxs, sigs, k, tx, rawTx;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                _context2.next = 3;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 3:\n                blockhash = _context2.sent;\n                txs = reqs.map(function (r) {\n                  var tx = r.tx;\n                  var signers = r.signers;\n\n                  if (signers === undefined) {\n                    signers = [];\n                  }\n\n                  tx.feePayer = _this.wallet.publicKey;\n                  tx.recentBlockhash = blockhash.blockhash;\n                  signers.filter(function (s) {\n                    return s !== undefined;\n                  }).forEach(function (kp) {\n                    tx.partialSign(kp);\n                  });\n                  return tx;\n                });\n                _context2.next = 7;\n                return this.wallet.signAllTransactions(txs);\n\n              case 7:\n                signedTxs = _context2.sent;\n                sigs = [];\n                k = 0;\n\n              case 10:\n                if (!(k < txs.length)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                tx = signedTxs[k];\n                rawTx = tx.serialize();\n                _context2.t0 = sigs;\n                _context2.next = 16;\n                return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 16:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n              case 18:\n                k += 1;\n                _context2.next = 10;\n                break;\n\n              case 21:\n                return _context2.abrupt(\"return\", sigs);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendAll(_x4, _x5) {\n        return _sendAll.apply(this, arguments);\n      }\n\n      return sendAll;\n    }()\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n\n  }, {\n    key: \"simulate\",\n    value: function () {\n      var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx, signers) {\n        var opts,\n            _a,\n            _b,\n            _c,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : this.opts;\n\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                tx.feePayer = this.wallet.publicKey;\n                _context3.next = 5;\n                return this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment);\n\n              case 5:\n                tx.recentBlockhash = _context3.sent.blockhash;\n                _context3.next = 8;\n                return this.wallet.signTransaction(tx);\n\n              case 8:\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                _context3.next = 11;\n                return simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n\n              case 11:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function simulate(_x6, _x7) {\n        return _simulate.apply(this, arguments);\n      }\n\n      return simulate;\n    }()\n  }], [{\n    key: \"defaultOptions\",\n    value: function defaultOptions() {\n      return {\n        preflightCommitment: \"recent\",\n        commitment: \"recent\"\n      };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n\n  }, {\n    key: \"local\",\n    value: function local(url, opts) {\n      opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n      var connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n\n  }, {\n    key: \"env\",\n    value: function env() {\n      if (isBrowser) {\n        throw new Error(\"Provider env is not available on browser.\");\n      }\n\n      var process = require(\"process\");\n\n      var url = process.env.ANCHOR_PROVIDER_URL;\n\n      if (url === undefined) {\n        throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n      }\n\n      var options = Provider.defaultOptions();\n      var connection = new Connection(url, options.commitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, options);\n    }\n  }]);\n\n  return Provider;\n}();\n/**\n * Node only wallet.\n */\n\n\nexport { Provider as default };\nexport var NodeWallet = /*#__PURE__*/function () {\n  function NodeWallet(payer) {\n    _classCallCheck(this, NodeWallet);\n\n    this.payer = payer;\n  }\n\n  _createClass(NodeWallet, [{\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tx) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                tx.partialSign(this.payer);\n                return _context4.abrupt(\"return\", tx);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function signTransaction(_x8) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAllTransactions\",\n    value: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(txs) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", txs.map(function (t) {\n                  t.partialSign(_this2.payer);\n                  return t;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signAllTransactions(_x9) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this.payer.publicKey;\n    }\n  }], [{\n    key: \"local\",\n    value: function local() {\n      var process = require(\"process\");\n\n      var payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n        encoding: \"utf-8\"\n      }))));\n      return new NodeWallet(payer);\n    }\n  }]);\n\n  return NodeWallet;\n}(); // Copy of Connection.simulateTransaction that takes a commitment parameter.\n\nfunction simulateTransaction(_x10, _x11, _x12) {\n  return _simulateTransaction.apply(this, arguments);\n}\n/**\n * Sets the default provider on the client.\n */\n\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context6.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString(\"base64\");\n            config = {\n              encoding: \"base64\",\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context6.next = 10;\n            return connection._rpcRequest(\"simulateTransaction\", args);\n\n          case 10:\n            res = _context6.sent;\n\n            if (!res.error) {\n              _context6.next = 13;\n              break;\n            }\n\n            throw new Error(\"failed to simulate transaction: \" + res.error.message);\n\n          case 13:\n            return _context6.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nexport function setProvider(provider) {\n  _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\n\nexport function getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n\n  return _provider;\n} // Global provider used as the default when a provider is not given.\n\nvar _provider = null;","map":{"version":3,"mappings":"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","names":["Connection","Keypair","sendAndConfirmRawTransaction","isBrowser","Provider","connection","wallet","opts","tx","signers","undefined","feePayer","publicKey","getRecentBlockhash","preflightCommitment","recentBlockhash","blockhash","signTransaction","filter","s","forEach","kp","partialSign","rawTx","serialize","txId","reqs","txs","map","r","signAllTransactions","signedTxs","sigs","k","length","push","_a","simulateTransaction","commitment","_b","_c","url","defaultOptions","NodeWallet","local","Error","process","require","env","ANCHOR_PROVIDER_URL","options","payer","t","fromSecretKey","Buffer","from","JSON","parse","readFileSync","ANCHOR_WALLET","encoding","transaction","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","config","args","_rpcRequest","res","error","message","result","setProvider","provider","_provider","getProvider"],"sourceRoot":"","sources":["../../src/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}