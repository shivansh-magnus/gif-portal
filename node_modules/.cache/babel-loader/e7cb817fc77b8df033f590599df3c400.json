{"ast":null,"code":"export class IdlError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"IdlError\";\n  }\n\n} // An error from a user defined program.\n\nexport class ProgramError extends Error {\n  constructor(code, msg) {\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    super(...params);\n    this.code = code;\n    this.msg = msg;\n  }\n\n  static parse(err, idlErrors) {\n    // TODO: don't rely on the error string. web3.js should preserve the error\n    //       code information instead of giving us an untyped string.\n    let components = err.toString().split(\"custom program error: \");\n\n    if (components.length !== 2) {\n      return null;\n    }\n\n    let errorCode;\n\n    try {\n      errorCode = parseInt(components[1]);\n    } catch (parseErr) {\n      return null;\n    } // Parse user error.\n\n\n    let errorMsg = idlErrors.get(errorCode);\n\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n    } // Parse framework internal error.\n\n\n    errorMsg = LangErrorMessage.get(errorCode);\n\n    if (errorMsg !== undefined) {\n      return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n    } // Unable to parse the error. Just return the untranslated error.\n\n\n    return null;\n  }\n\n  toString() {\n    return this.msg;\n  }\n\n}\nconst LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n  // IDL instructions.\n  IdlInstructionStub: 120,\n  IdlInstructionInvalidProgram: 121,\n  // Constraints.\n  ConstraintMut: 140,\n  ConstraintHasOne: 141,\n  ConstraintSigner: 142,\n  ConstraintRaw: 143,\n  ConstraintOwner: 144,\n  ConstraintRentExempt: 145,\n  ConstraintSeeds: 146,\n  ConstraintExecutable: 147,\n  ConstraintState: 148,\n  ConstraintAssociated: 149,\n  ConstraintAssociatedInit: 150,\n  ConstraintClose: 151,\n  ConstraintAddress: 152,\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 160,\n  AccountDiscriminatorNotFound: 161,\n  AccountDiscriminatorMismatch: 162,\n  AccountDidNotDeserialize: 163,\n  AccountDidNotSerialize: 164,\n  AccountNotEnoughKeys: 165,\n  AccountNotMutable: 166,\n  AccountNotProgramOwned: 167,\n  InvalidProgramId: 168,\n  InvalidProgramExecutable: 169,\n  AccountNotSigner: 170,\n  AccountNotSystemOwned: 171,\n  // State.\n  StateInvalidAddress: 180,\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 299\n};\nconst LangErrorMessage = new Map([// Instructions.\n[LangErrorCode.InstructionMissing, \"8 byte instruction identifier not provided\"], [LangErrorCode.InstructionFallbackNotFound, \"Fallback functions are not supported\"], [LangErrorCode.InstructionDidNotDeserialize, \"The program could not deserialize the given instruction\"], [LangErrorCode.InstructionDidNotSerialize, \"The program could not serialize the given instruction\"], // Idl instructions.\n[LangErrorCode.IdlInstructionStub, \"The program was compiled without idl instructions\"], [LangErrorCode.IdlInstructionInvalidProgram, \"The transaction was given an invalid program for the IDL instruction\"], // Constraints.\n[LangErrorCode.ConstraintMut, \"A mut constraint was violated\"], [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"], [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"], [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"], [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"], [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"], [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"], [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"], [LangErrorCode.ConstraintState, \"A state constraint was violated\"], [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"], [LangErrorCode.ConstraintAssociatedInit, \"An associated init constraint was violated\"], [LangErrorCode.ConstraintClose, \"A close constraint was violated\"], [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"], // Accounts.\n[LangErrorCode.AccountDiscriminatorAlreadySet, \"The account discriminator was already set on this account\"], [LangErrorCode.AccountDiscriminatorNotFound, \"No 8 byte discriminator was found on the account\"], [LangErrorCode.AccountDiscriminatorMismatch, \"8 byte discriminator did not match what was expected\"], [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"], [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"], [LangErrorCode.AccountNotEnoughKeys, \"Not enough account keys given to the instruction\"], [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"], [LangErrorCode.AccountNotProgramOwned, \"The given account is not owned by the executing program\"], [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"], [LangErrorCode.InvalidProgramExecutable, \"Program account is not executable\"], [LangErrorCode.AccountNotSigner, \"The given account did not sign\"], [LangErrorCode.AccountNotSystemOwned, \"The given account is not owned by the system program\"], // State.\n[LangErrorCode.StateInvalidAddress, \"The given state account does not have the correct address\"], // Misc.\n[LangErrorCode.Deprecated, \"The API being used is deprecated and should no longer be used\"]]);","map":{"version":3,"mappings":"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","names":["IdlError","Error","constructor","message","name","ProgramError","code","msg","params","parse","err","idlErrors","components","toString","split","length","errorCode","parseInt","parseErr","errorMsg","get","undefined","LangErrorMessage","LangErrorCode","InstructionMissing","InstructionFallbackNotFound","InstructionDidNotDeserialize","InstructionDidNotSerialize","IdlInstructionStub","IdlInstructionInvalidProgram","ConstraintMut","ConstraintHasOne","ConstraintSigner","ConstraintRaw","ConstraintOwner","ConstraintRentExempt","ConstraintSeeds","ConstraintExecutable","ConstraintState","ConstraintAssociated","ConstraintAssociatedInit","ConstraintClose","ConstraintAddress","AccountDiscriminatorAlreadySet","AccountDiscriminatorNotFound","AccountDiscriminatorMismatch","AccountDidNotDeserialize","AccountDidNotSerialize","AccountNotEnoughKeys","AccountNotMutable","AccountNotProgramOwned","InvalidProgramId","InvalidProgramExecutable","AccountNotSigner","AccountNotSystemOwned","StateInvalidAddress","Deprecated","Map"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}