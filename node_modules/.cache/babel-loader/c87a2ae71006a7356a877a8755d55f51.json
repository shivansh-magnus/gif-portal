{"ast":null,"code":"import _objectSpread from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport * as bs58 from \"bs58\";\nimport { IdlCoder } from \"./idl\";\nimport { sighash } from \"./common\";\n/**\n * Namespace for state method function signatures.\n */\n\nexport var SIGHASH_STATE_NAMESPACE = \"state\";\n/**\n * Namespace for global instruction function signatures (i.e. functions\n * that aren't namespaced by the state or any of its trait implementations).\n */\n\nexport var SIGHASH_GLOBAL_NAMESPACE = \"global\";\n/**\n * Encodes and decodes program instructions.\n */\n\nexport var InstructionCoder = /*#__PURE__*/function () {\n  function InstructionCoder(idl) {\n    var _this = this;\n\n    _classCallCheck(this, InstructionCoder);\n\n    this.idl = idl;\n    this.ixLayout = InstructionCoder.parseIxLayout(idl);\n    var sighashLayouts = new Map();\n    idl.instructions.forEach(function (ix) {\n      var sh = sighash(SIGHASH_GLOBAL_NAMESPACE, ix.name);\n      sighashLayouts.set(bs58.encode(sh), {\n        layout: _this.ixLayout.get(ix.name),\n        name: ix.name\n      });\n    });\n\n    if (idl.state) {\n      idl.state.methods.map(function (ix) {\n        var sh = sighash(SIGHASH_STATE_NAMESPACE, ix.name);\n        sighashLayouts.set(bs58.encode(sh), {\n          layout: _this.ixLayout.get(ix.name),\n          name: ix.name\n        });\n      });\n    }\n\n    this.sighashLayouts = sighashLayouts;\n  }\n  /**\n   * Encodes a program instruction.\n   */\n\n\n  _createClass(InstructionCoder, [{\n    key: \"encode\",\n    value: function encode(ixName, ix) {\n      return this._encode(SIGHASH_GLOBAL_NAMESPACE, ixName, ix);\n    }\n    /**\n     * Encodes a program state instruction.\n     */\n\n  }, {\n    key: \"encodeState\",\n    value: function encodeState(ixName, ix) {\n      return this._encode(SIGHASH_STATE_NAMESPACE, ixName, ix);\n    }\n  }, {\n    key: \"_encode\",\n    value: function _encode(nameSpace, ixName, ix) {\n      var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n      var methodName = camelCase(ixName);\n      var layout = this.ixLayout.get(methodName);\n\n      if (!layout) {\n        throw new Error(\"Unknown method: \".concat(methodName));\n      }\n\n      var len = layout.encode(ix, buffer);\n      var data = buffer.slice(0, len);\n      return Buffer.concat([sighash(nameSpace, ixName), data]);\n    }\n  }, {\n    key: \"decode\",\n    value:\n    /**\n     * Dewcodes a program instruction.\n     */\n    function decode(ix) {\n      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"hex\";\n\n      if (typeof ix === \"string\") {\n        ix = encoding === \"hex\" ? Buffer.from(ix, \"hex\") : bs58.decode(ix);\n      }\n\n      var sighash = bs58.encode(ix.slice(0, 8));\n      var data = ix.slice(8);\n      var decoder = this.sighashLayouts.get(sighash);\n\n      if (!decoder) {\n        return null;\n      }\n\n      return {\n        data: decoder.layout.decode(data),\n        name: decoder.name\n      };\n    }\n    /**\n     * Returns a formatted table of all the fields in the given instruction data.\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(ix, accountMetas) {\n      return InstructionFormatter.format(ix, accountMetas, this.idl);\n    }\n  }], [{\n    key: \"parseIxLayout\",\n    value: function parseIxLayout(idl) {\n      var stateMethods = idl.state ? idl.state.methods : [];\n      var ixLayouts = stateMethods.map(function (m) {\n        var fieldLayouts = m.args.map(function (arg) {\n          var _a, _b;\n\n          return IdlCoder.fieldLayout(arg, Array.from([].concat(_toConsumableArray((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), _toConsumableArray((_b = idl.types) !== null && _b !== void 0 ? _b : []))));\n        });\n        var name = camelCase(m.name);\n        return [name, borsh.struct(fieldLayouts, name)];\n      }).concat(idl.instructions.map(function (ix) {\n        var fieldLayouts = ix.args.map(function (arg) {\n          var _a, _b;\n\n          return IdlCoder.fieldLayout(arg, Array.from([].concat(_toConsumableArray((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), _toConsumableArray((_b = idl.types) !== null && _b !== void 0 ? _b : []))));\n        });\n        var name = camelCase(ix.name);\n        return [name, borsh.struct(fieldLayouts, name)];\n      })); // @ts-ignore\n\n      return new Map(ixLayouts);\n    }\n  }]);\n\n  return InstructionCoder;\n}();\n\nvar InstructionFormatter = /*#__PURE__*/function () {\n  function InstructionFormatter() {\n    _classCallCheck(this, InstructionFormatter);\n  }\n\n  _createClass(InstructionFormatter, null, [{\n    key: \"format\",\n    value: function format(ix, accountMetas, idl) {\n      var idlIx = idl.instructions.filter(function (i) {\n        return ix.name === i.name;\n      })[0];\n\n      if (idlIx === undefined) {\n        console.error(\"Invalid instruction given\");\n        return null;\n      }\n\n      var args = idlIx.args.map(function (idlField) {\n        return {\n          name: idlField.name,\n          type: InstructionFormatter.formatIdlType(idlField.type),\n          data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types)\n        };\n      });\n      var flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);\n      var accounts = accountMetas.map(function (meta, idx) {\n        if (idx < flatIdlAccounts.length) {\n          return _objectSpread({\n            name: flatIdlAccounts[idx].name\n          }, meta);\n        } // \"Remaining accounts\" are unnamed in Anchor.\n        else {\n          return _objectSpread({\n            name: undefined\n          }, meta);\n        }\n      });\n      return {\n        args: args,\n        accounts: accounts\n      };\n    }\n  }, {\n    key: \"formatIdlType\",\n    value: function formatIdlType(idlType) {\n      if (typeof idlType === \"string\") {\n        return idlType;\n      }\n\n      if (\"vec\" in idlType) {\n        return \"Vec<\".concat(this.formatIdlType(idlType.vec), \">\");\n      }\n\n      if (\"option\" in idlType) {\n        return \"Option<\".concat(this.formatIdlType(idlType.option), \">\");\n      }\n\n      if (\"defined\" in idlType) {\n        return idlType.defined;\n      }\n\n      if (\"array\" in idlType) {\n        return \"Array<\".concat(idlType.array[0], \"; \").concat(idlType.array[1], \">\");\n      }\n\n      throw new Error(\"Unknown IDL type: \".concat(idlType));\n    }\n  }, {\n    key: \"formatIdlData\",\n    value: function formatIdlData(idlField, data, types) {\n      var _this2 = this;\n\n      if (typeof idlField.type === \"string\") {\n        return data.toString();\n      } // @ts-ignore\n\n\n      if (idlField.type.vec) {\n        // @ts-ignore\n        return \"[\" + data // @ts-ignore\n        .map(function (d) {\n          return _this2.formatIdlData( // @ts-ignore\n          {\n            name: \"\",\n            type: idlField.type.vec\n          }, d);\n        }).join(\", \") + \"]\";\n      } // @ts-ignore\n\n\n      if (idlField.type.option) {\n        // @ts-ignore\n        return data === null ? \"null\" : this.formatIdlData( // @ts-ignore\n        {\n          name: \"\",\n          type: idlField.type.option\n        }, data);\n      } // @ts-ignore\n\n\n      if (idlField.type.defined) {\n        if (types === undefined) {\n          throw new Error(\"User defined types not provided\");\n        } // @ts-ignore\n\n\n        var filtered = types.filter(function (t) {\n          return t.name === idlField.type.defined;\n        });\n\n        if (filtered.length !== 1) {\n          // @ts-ignore\n          throw new Error(\"Type not found: \".concat(idlField.type.defined));\n        }\n\n        return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);\n      }\n\n      return \"unknown\";\n    }\n  }, {\n    key: \"formatIdlDataDefined\",\n    value: function formatIdlDataDefined(typeDef, data, types) {\n      if (typeDef.type.kind === \"struct\") {\n        var struct = typeDef.type;\n        var fields = Object.keys(data).map(function (k) {\n          var f = struct.fields.filter(function (f) {\n            return f.name === k;\n          })[0];\n\n          if (f === undefined) {\n            throw new Error(\"Unable to find type\");\n          }\n\n          return k + \": \" + InstructionFormatter.formatIdlData(f, data[k], types);\n        }).join(\", \");\n        return \"{ \" + fields + \" }\";\n      } else {\n        if (typeDef.type.variants.length === 0) {\n          return \"{}\";\n        } // Struct enum.\n\n\n        if (typeDef.type.variants[0].name) {\n          var variants = typeDef.type.variants;\n          var variant = Object.keys(data)[0];\n          var enumType = data[variant];\n          var namedFields = Object.keys(enumType).map(function (f) {\n            var _a;\n\n            var fieldData = enumType[f];\n            var idlField = (_a = variants[variant]) === null || _a === void 0 ? void 0 : _a.filter(function (v) {\n              return v.name === f;\n            })[0];\n\n            if (idlField === undefined) {\n              throw new Error(\"Unable to find variant\");\n            }\n\n            return f + \": \" + InstructionFormatter.formatIdlData(idlField, fieldData, types);\n          }).join(\", \");\n          var variantName = camelCase(variant, {\n            pascalCase: true\n          });\n\n          if (namedFields.length === 0) {\n            return variantName;\n          }\n\n          return \"\".concat(variantName, \" { \").concat(namedFields, \" }\");\n        } // Tuple enum.\n        else {\n          // TODO.\n          return \"Tuple formatting not yet implemented\";\n        }\n      }\n    }\n  }, {\n    key: \"flattenIdlAccounts\",\n    value: function flattenIdlAccounts(accounts, prefix) {\n      // @ts-ignore\n      return accounts.map(function (account) {\n        var accName = sentenceCase(account.name); // @ts-ignore\n\n        if (account.accounts) {\n          var newPrefix = prefix ? \"\".concat(prefix, \" > \").concat(accName) : accName; // @ts-ignore\n\n          return InstructionFormatter.flattenIdlAccounts( // @ts-ignore\n          account.accounts, newPrefix);\n        } else {\n          return _objectSpread(_objectSpread({}, account), {}, {\n            name: prefix ? \"\".concat(prefix, \" > \").concat(accName) : accName\n          });\n        }\n      }).flat();\n    }\n  }]);\n\n  return InstructionFormatter;\n}();\n\nfunction sentenceCase(field) {\n  var result = field.replace(/([A-Z])/g, \" $1\");\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}","map":{"version":3,"mappings":"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","names":["camelCase","borsh","bs58","IdlCoder","sighash","SIGHASH_STATE_NAMESPACE","SIGHASH_GLOBAL_NAMESPACE","InstructionCoder","idl","ixLayout","parseIxLayout","sighashLayouts","Map","instructions","forEach","ix","sh","name","set","encode","layout","get","state","methods","map","ixName","_encode","nameSpace","buffer","Buffer","alloc","methodName","Error","len","data","slice","concat","encoding","from","decode","decoder","accountMetas","InstructionFormatter","format","stateMethods","ixLayouts","m","fieldLayouts","args","arg","fieldLayout","Array","accounts","_a","types","_b","struct","idlIx","filter","i","undefined","console","error","idlField","type","formatIdlType","formatIdlData","flatIdlAccounts","flattenIdlAccounts","meta","idx","length","idlType","vec","option","defined","array","toString","d","join","filtered","t","formatIdlDataDefined","typeDef","kind","fields","Object","keys","k","f","variants","variant","enumType","namedFields","fieldData","v","variantName","pascalCase","prefix","account","accName","sentenceCase","newPrefix","flat","field","result","replace","charAt","toUpperCase"],"sourceRoot":"","sources":["../../../src/coder/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}