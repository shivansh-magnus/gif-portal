{"ast":null,"code":"import _toConsumableArray from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivanshdwivedi/Desktop/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\n\nvar InstructionNamespaceFactory = /*#__PURE__*/function () {\n  function InstructionNamespaceFactory() {\n    _classCallCheck(this, InstructionNamespaceFactory);\n  }\n\n  _createClass(InstructionNamespaceFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, encodeFn, programId) {\n      if (idlIx.name === \"_inner\") {\n        throw new IdlError(\"the _inner name is reserved\");\n      }\n\n      var ix = function ix() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)),\n            _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2),\n            ixArgs = _splitArgsAndCtx2[0],\n            ctx = _splitArgsAndCtx2[1];\n\n        validateAccounts(idlIx.accounts, ctx.accounts);\n        validateInstruction.apply(void 0, [idlIx].concat(args));\n        var keys = ix.accounts(ctx.accounts);\n\n        if (ctx.remainingAccounts !== undefined) {\n          keys.push.apply(keys, _toConsumableArray(ctx.remainingAccounts));\n        }\n\n        if (ctx.__private && ctx.__private.logAccounts) {\n          console.log(\"Outgoing account metas:\", keys);\n        }\n\n        return new TransactionInstruction({\n          keys: keys,\n          programId: programId,\n          data: encodeFn(idlIx.name, toInstruction.apply(void 0, [idlIx].concat(_toConsumableArray(ixArgs))))\n        });\n      }; // Utility fn for ordering the accounts for this instruction.\n\n\n      ix[\"accounts\"] = function (accs) {\n        return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n      };\n\n      return ix;\n    }\n  }, {\n    key: \"accountsArray\",\n    value: function accountsArray(ctx, accounts) {\n      if (!ctx) {\n        return [];\n      }\n\n      return accounts.map(function (acc) {\n        // Nested accounts.\n        var nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n\n        if (nestedAccounts !== undefined) {\n          var rpcAccs = ctx[acc.name];\n          return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts).flat();\n        } else {\n          var account = acc;\n          return {\n            pubkey: translateAddress(ctx[acc.name]),\n            isWritable: account.isMut,\n            isSigner: account.isSigner\n          };\n        }\n      }).flat();\n    }\n  }]);\n\n  return InstructionNamespaceFactory;\n}(); // Throws error if any argument required for the `ix` is not given.\n\n\nexport { InstructionNamespaceFactory as default };\n\nfunction validateInstruction(ix) {// todo\n}","map":{"version":3,"mappings":";;;;AAAA,SAGEA,sBAHF,QAIO,iBAJP;AAYA,SAASC,QAAT,QAAyB,aAAzB;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,gBAHF,QAKO,WALP;AAMA,SAAmBC,eAAnB,QAA0C,YAA1C;;IASqBC,2B;;;;;;;WACZ,eACLC,KADK,EAELC,QAFK,EAGLC,SAHK,EAGe;MAEpB,IAAIF,KAAK,CAACG,IAAN,KAAe,QAAnB,EAA6B;QAC3B,MAAM,IAAIT,QAAJ,CAAa,6BAAb,CAAN;MACD;;MAED,IAAMU,EAAE,GAAG,SAALA,EAAK,GAEiB;QAAA,kCADvBC,IACuB;UADvBA,IACuB;QAAA;;QAC1B,uBAAsBP,eAAe,CAACE,KAAD,YAAYK,IAAZ,EAArC;QAAA;QAAA,IAAOC,MAAP;QAAA,IAAeC,GAAf;;QACAX,gBAAgB,CAACI,KAAK,CAACQ,QAAP,EAAiBD,GAAG,CAACC,QAArB,CAAhB;QACAC,mBAAmB,MAAnB,UAAoBT,KAApB,SAA8BK,IAA9B;QAEA,IAAMK,IAAI,GAAGN,EAAE,CAACI,QAAH,CAAYD,GAAG,CAACC,QAAhB,CAAb;;QAEA,IAAID,GAAG,CAACI,iBAAJ,KAA0BC,SAA9B,EAAyC;UACvCF,IAAI,CAACG,IAAL,WAAI,qBAASN,GAAG,CAACI,iBAAb,EAAJ;QACD;;QAED,IAAIJ,GAAG,CAACO,SAAJ,IAAiBP,GAAG,CAACO,SAAJ,CAAcC,WAAnC,EAAgD;UAC9CC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCP,IAAvC;QACD;;QACD,OAAO,IAAIjB,sBAAJ,CAA2B;UAChCiB,IAAI,EAAJA,IADgC;UAEhCR,SAAS,EAATA,SAFgC;UAGhCgB,IAAI,EAAEjB,QAAQ,CAACD,KAAK,CAACG,IAAP,EAAaR,aAAa,MAAb,UAAcK,KAAd,4BAAwBM,MAAxB,GAAb;QAHkB,CAA3B,CAAP;MAKD,CArBD,CANoB,CA6BpB;;;MACAF,EAAE,CAAC,UAAD,CAAF,GAAiB,UAACe,IAAD,EAAsD;QACrE,OAAOpB,2BAA2B,CAACqB,aAA5B,CAA0CD,IAA1C,EAAgDnB,KAAK,CAACQ,QAAtD,CAAP;MACD,CAFD;;MAIA,OAAOJ,EAAP;IACD;;;WAEM,uBACLG,GADK,EAELC,QAFK,EAE8B;MAEnC,IAAI,CAACD,GAAL,EAAU;QACR,OAAO,EAAP;MACD;;MAED,OAAOC,QAAQ,CACZa,GADI,CACA,UAACC,GAAD,EAAwB;QAC3B;QACA,IAAMC,cAAc,GAClB,cAAcD,GAAd,GAAoBA,GAAG,CAACd,QAAxB,GAAmCI,SADrC;;QAEA,IAAIW,cAAc,KAAKX,SAAvB,EAAkC;UAChC,IAAMY,OAAO,GAAGjB,GAAG,CAACe,GAAG,CAACnB,IAAL,CAAnB;UACA,OAAOJ,2BAA2B,CAACqB,aAA5B,CACLI,OADK,EAEJF,GAAmB,CAACd,QAFhB,EAGLiB,IAHK,EAAP;QAID,CAND,MAMO;UACL,IAAMC,OAAO,GAAeJ,GAA5B;UACA,OAAO;YACLK,MAAM,EAAE9B,gBAAgB,CAACU,GAAG,CAACe,GAAG,CAACnB,IAAL,CAAJ,CADnB;YAELyB,UAAU,EAAEF,OAAO,CAACG,KAFf;YAGLC,QAAQ,EAAEJ,OAAO,CAACI;UAHb,CAAP;QAKD;MACF,CAnBI,EAoBJL,IApBI,EAAP;IAqBD;;;;KAuEH;;;SA7IqB1B,2B;;AA8IrB,SAASU,mBAAT,CAA6BL,EAA7B,EAA+D,CAC7D;AACD","names":["TransactionInstruction","IdlError","toInstruction","validateAccounts","translateAddress","splitArgsAndCtx","InstructionNamespaceFactory","idlIx","encodeFn","programId","name","ix","args","ixArgs","ctx","accounts","validateInstruction","keys","remainingAccounts","undefined","push","__private","logAccounts","console","log","data","accs","accountsArray","map","acc","nestedAccounts","rpcAccs","flat","account","pubkey","isWritable","isMut","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}